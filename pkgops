#!/bin/bash 
#!/bin/bash -x

declare -r VERSION="1.0-7"

#-------------------------------------------------------------------------------
printlog()
{
cat <<EOLOG
(T001)  rectify importappsdpkg() for correct use of dpkg: (man dpkg, et al)
	apt-get dselect-upgrade
	apt-cache dumpavail | dpkg --merge-avail
v 1.0-7
	20170418
	
v 1.0-6
	20170131
	added parentheses to installlistofapps() already installed version
v 1.0-5
	20170117
	added tput highlighting for packages NOT installed
v 1.0-4
	20170116
	add checkpolicycandidate()
	add fuzzycheckifappsinstalled()
v 1.0-3
	20170114
	clean up comments
v 1.0-2
	20170108
	add printlog()
v 1.0-1
	20170107
	include stripping of comments from input file inside functions: 
	  (checkifappsinstalled(), installlistofapps(), removelistofapps() )
	reformat help menu, again
	remove sudo apt update prior to checking package check with -c option
EOLOG
} # printlog()

#-------------------------------------------------------------------------------
# declare variables
#-------------------------------------------------------------------------------

declare -r BASENAME=`basename ${0}`
declare -r DASHES="--------------------------------------------------------------------------------"
declare -r INPUT_FILE="${2}"
declare -r NUMARGS="$#"
declare -r SMASHES="================================================================================"

#-------------------------------------------------------------------------------
# define functions
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
printver() { printf "%s %s\n" "${BASENAME}", "version (${VERSION})"; }

#-------------------------------------------------------------------------------
printhelp()
{
cat <<EOH
${BASENAME}, version (${VERSION}) A utility to process a list of packages.
  Usage :  ${BASENAME} option filename
  Option:  -c   apt-get check installed status of apps
           -i   apt-get install apps
           -l   print ${BASENAME} change log
           -m   dpkg    import apps (experimental)
           -p   apt-cache policy installed/candidate
           -r   apt-get remove apps (does not remove user configs)
           -R   apt-get remove apps with prejudice (removes user configs)
           -s   apt-get simulate install of apps 
           -x   dpkg    export apps 
           -z   dpkg fuzzy check installed status of apps
                Input file format (-c,-i,-s): one package per line. 
                Input file format (-m,-r,-R,-x): dpkg file format.
EOH
} # printhelp()

#-------------------------------------------------------------------------------
checkinputfilevalidity()
{
local infile="$1"
if [ -z "$infile" ]
then
   # no argument, print usage
   echo "Error: missing input file"
   exit 100
elif [ ! -f "$infile" -o \
       ! -s "$infile" -o \
       ! -r "$infile" ]
then
   # file not there, print err msg
   echo "Error: $1 cannot be found, is empty, or is not a regular file"
   exit 101
fi
} # checkinputfilevalidity()

#-------------------------------------------------------------------------------
checkifappsinstalled()
{
local infile="$1"
local APP
# local TRV=`tput rev`
local TRS=`tput sgr0`
# sudo apt-get update 
for APP in $(cat "$infile" | egrep -v '^#')
do
   if [ $(dpkg-query -W -f='${Status}' $APP  2>/dev/null | \
                           grep -c "ok installed") -eq 0 ]
   then
      # app not installed, simulate apt install to display diagnostics
      ## echo "NOT installed: $APP" 
      printf "NOT installed: ${APP}${TRS}\n"
   else
      # app installed, print package and version
      VER=$(dpkg -l $APP 2>/dev/null | grep "ii" | awk '{ print $3; }')
      printf "    %s %-30s (%s)\n" "installed:" $APP $VER
      # dpkg -l | grep $APP | awk '{ printf "   %s %-30s(%s)\n", "installed:", $2, $3; }'
   fi
done
} # checkifappsinstalled()

#-------------------------------------------------------------------------------
fuzzycheckifappsinstalled()
{
local infile="$1"
local APP
local RED='\033[0;31m'
local NOC='\033[0m'
# local TRV=`tput rev`
local TRS=`tput sgr0`
# sudo apt-get update 
for APP in $(cat "$infile" | egrep -v '^#')
do
   if [ $(dpkg-query -W -f='${Status}' $APP  2>/dev/null | \
                           grep -c "ok installed") -eq 0 ]
   then
      # app not installed, simulate apt install to display diagnostics
      ## printf "${RED}NOT installed: %-30s ====================${NOC}\n" $APP
      printf "NOT installed: %-30s ====================${TRS}\n" $APP
   else
      # app installed, print package and version
      # VER=$(dpkg -l $APP 2>/dev/null | grep "ii" | awk '{ print $3; }')
      # printf "    %s %-30s (%s)\n" "installed:" $APP $VER
      echo $APP
      dpkg -l | grep $APP | awk '{ printf "    %s %-30s (%s)\n", "installed:", $2, $3; }'
   fi
done
} # fuzzycheckifappsinstalled()

#-------------------------------------------------------------------------------
installlistofapps()
{
local installmode="$1"
local infile="$2"
local APP
echo ${SMASHES}
for APP in $(cat "$infile" | egrep -v '^#')
do
   if [ $(dpkg-query -W -f='${Status}' $APP  2>/dev/null | \
                           grep -c "ok installed") -eq 0 ]
   then
      if [ "${installmode}" = "INSTALL" ]
      then
         echo "Installing: $APP"
         echo ${DASHES}
         sudo apt-get install $APP -y
      elif  [ "${installmode}" = "SIMULATE" ]
      then
         echo "Simulating: $APP"
         echo ${DASHES}
         sudo apt-get install $APP -s
      else
         echo "Error: installmode level in install function undefined"
         exit 103
      fi
      echo ${SMASHES}
   else
      VER=$(dpkg -l $APP 2>/dev/null | grep "ii" | awk '{ print $3; }')
      echo "    already installed: $APP ($VER)"
      echo ${SMASHES}
   fi
done
} # installlistofapps() 

#-------------------------------------------------------------------------------
checkpolicycandidate() 
{
local infile="$1"
for APP in $(cat "$infile" | egrep -v '^#')
do
   echo ${DASHES}
   apt-cache policy $APP | awk 'NR < 4'
done
echo ${DASHES}
} # checkpolicycandidate()

#-------------------------------------------------------------------------------
removelistofapps()
{
local prejudice="$1"
local infile="$2"
local APP
echo ${SMASHES}
for APP in $(cat "$infile" | egrep -v '^#')
do
   if [ $(dpkg-query -W -f='${Status}' $APP  2>/dev/null | grep -c "ok installed") -eq 0 ]
   then
      echo "NOT installed: cannot remove ... $APP"
      echo ${SMASHES}
   else
      if [ "${prejudice}" = "REMOVE" ]
      then
         sudo apt-get remove $APP
      elif  [ "${prejudice}" = "PURGE" ]
      then
         sudo apt-get --purge autoremove $APP
      else
         echo "Error: prejudice level in remove function undefined"
         exit 104
      fi
      echo ${SMASHES}
   fi
done
} # removelistofapps() 

#-------------------------------------------------------------------------------
exportappsdpkg()
{
## dpkg --get-selections
## if [ "$?" -ne 0 ]
if ! dpkg --get-selections
then
   echo "Error: something broke with dpkg get selections."
fi
} # exportappsdpkg() 

#-------------------------------------------------------------------------------
importappsdpkg()
{
local infile="$1"
sudo dpkg --set-selections < "${infile}"
sudo apt-get update && sudo apt-get -u dselect-upgrade
if [ "$?" -ne 0 ]
then
   echo "Error: something broke with dpkg get selections."
fi
} # importappsdpkg() 

################################################################################
# begin main
################################################################################

#-------------------------------------------------------------------------------
# lock functions
#-------------------------------------------------------------------------------

readonly -f checkifappsinstalled
readonly -f checkinputfilevalidity
readonly -f checkpolicycandidate
readonly -f exportappsdpkg 
readonly -f fuzzycheckifappsinstalled
readonly -f importappsdpkg
readonly -f installlistofapps
readonly -f printhelp
readonly -f printlog
readonly -f printver
readonly -f removelistofapps

#-------------------------------------------------------------------------------
# preprocess command arguments
#-------------------------------------------------------------------------------

# check for incorrect number of cli args
if [ "${NUMARGS}" -eq 0   -o \
     "${NUMARGS}" -gt 2 ] 
then
   printhelp
   exit 105
fi

# print version if asked for
if [ "$1" = "-v" -o          \
     "$1" = "-V" -o          \
     "$1" = "-version" -o    \
     "$1" = "--version" -o   \
     "$1" = "-Version" -o    \
     "$1" = "--Version" ] 
then
   printver
   exit 106
# or print changelog if asked for
elif [ "$1" = "-l" ]
then
   printlog
   exit 107
fi

#-------------------------------------------------------------------------------
# process command arguments
#-------------------------------------------------------------------------------

while getopts ":cilmprRsxz" opt; do
   case $opt in
      c) checkinputfilevalidity "${INPUT_FILE}"
         checkifappsinstalled "${INPUT_FILE}"
         ;;
      i) checkinputfilevalidity "${INPUT_FILE}"
         installlistofapps "INSTALL" "${INPUT_FILE}"
         ;;
      l) printlog
         ;;
      m) checkinputfilevalidity "${INPUT_FILE}"
         importappsdpkg "${INPUT_FILE}"
         ;;
      p) checkpolicycandidate "${INPUT_FILE}"
         ;;
      r) checkinputfilevalidity "${INPUT_FILE}"
         removelistofapps "REMOVE" "${INPUT_FILE}"
         ;;
      R) checkinputfilevalidity "${INPUT_FILE}"
         removelistofapps "PURGE" "${INPUT_FILE}"
         ;;
      s) checkinputfilevalidity "${INPUT_FILE}"
         installlistofapps "SIMULATE" "${INPUT_FILE}"
         ;;
      x) exportappsdpkg
         ;;
      z) checkinputfilevalidity "${INPUT_FILE}"
         fuzzycheckifappsinstalled "${INPUT_FILE}"
         ;;
      *) printhelp
         ;;
   esac
done

################################################################################
# end main
################################################################################
